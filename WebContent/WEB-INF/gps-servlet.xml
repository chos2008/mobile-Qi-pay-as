<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:mvc="http://www.springframework.org/schema/mvc" 
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.0.xsd 
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
    http://www.springframework.org/schema/jdbc 
    http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
    http://www.springframework.org/schema/mvc 
    http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<context:component-scan base-package="com.qidea.payment.rest"/>
    <context:component-scan base-package="com.qidea.payment.controller"/>
    <!-- 
    <context:component-scan base-package="com.jiadi.customservice.rest">
    	<context:exclude-filter type="assignable" expression="com.jiadi.customservice.rest.MessageRestService"/>
    </context:component-scan>
     -->
	<context:annotation-config/>
    
    <!-- 
    <context:property-placeholder location="classpath:datasource_customservice.properties"/>
	 -->
    <mvc:annotation-driven />
    <!--
      - The form-based controllers within this application provide @RequestMapping
      - annotations at the type level for path mapping URLs and @RequestMapping
      - at the method level for request type mappings (e.g., GET and POST).
      - In contrast, ClinicController - which is not form-based - provides
      - @RequestMapping only at the method level for path mapping URLs.
      -
      - DefaultAnnotationHandlerMapping is driven by these annotations and is
      - enabled by default with Java 5+.
     -->

    <!--
      - This bean processes annotated handler methods, applying PetClinic-specific PropertyEditors
      - for request parameter binding. It overrides the default AnnotationMethodHandlerAdapter.
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"></bean>
	
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />
			</list>
		</property>
    </bean>

	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" />
     -->
		
    <!--
      - This bean resolves specific types of exceptions to corresponding logical
      - view names for error views. The default behaviour of DispatcherServlet
      - is to propagate all exceptions to the servlet container: this will happen
      - here with all other types of exceptions.

    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="org.springframework.dao.DataAccessException">dataAccessFailure</prop>
                <prop key="org.springframework.transaction.TransactionException">dataAccessFailure</prop>
            </props>
        </property>
    </bean>
     -->

    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" 
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/"/>
		<property name="suffix" value=".jsp"/>
	</bean>
	
    <!--
      - Message source for this context, loaded from localized "messages_xx" files.
      - Could also reside in the root application context, as it is generic,
      - but is currently just used within PetClinic's web tier.

    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource"
        p:basename="messages"/> 
     -->

	<!-- 
	
	 -->
    <import resource="classpath*:applicationContext-*"/>
</beans>
